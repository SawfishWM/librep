@c -*-Texinfo-*-

@chapter News
@cindex News

@unnumberedsec 0.11.2

@itemize @bullet

@item Replaced many special forms by macros---@code{let}, @code{let*},
@code{function}, @code{if}, @code{and}, @code{or}, @code{prog2},
@code{defmacro}, @code{defun}, @code{defconst}, @code{define-value},
@code{setq-default}

@item @code{let} now supports Scheme's named-let construct for
iteration via tail recursion

@item Parse some standard Common Lisp and Scheme syntax: @samp{#|
@dots{} |#} block comments, @samp{#\@var{c}} or @samp{#\@var{name}}
characters (where @var{name} may be one of: @code{space},
@code{newline}, @code{backspace}, @code{tab}, @code{linefeed},
@code{return}, @code{page}, @code{rubout}), and @samp{#(@dots{})}
vectors

@item When comparing symbols, compare their names as strings

@item Implemented Scheme's @code{dynamic-wind} function

@item Fixed bug of sometimes evaluating function arguments in the
environment of the callee not the caller

@item Fixed bug when calculating how long to sleep for when no threads
are available

@item Fixed bugs in mutex implementation (Damon Anderson)

@item Work around bugs in Tru64 @code{RTLD_GLOBAL}; everything should
work on Tru64 now (Aron Griffis)

@item Fixed bug of not saving current regexp state across continuations

@end itemize


@unnumberedsec 0.11.1

@itemize @bullet
@item The compiler now eliminates single-function tail calls (instead
of leaving it to the virtual machine)

@item Updated to use libtool-1.3.4

@item Miscellaneous bug fixes and minor changes
@end itemize


@unnumberedsec 0.11

@itemize @bullet

@item Better support for numerical computing. Now supports bignums,
rational numbers (numerator and denominator are bignums), and floating
point values as well as the original fixnums. Many new numerical
functions supporting these types. Promotes and demotes hopefully as
you'd expect (never demotes an inexact number to an exact number).
Tries to follow the Scheme numeric system as much as possible

@item Supports @dfn{guardian} objects through the @code{make-guardian}
function (as described in Dybvig's paper). These are a clean mechanism
for allowing the programmer to control when arbitrary lisp objects are
finally deallocated. Also added a new hook: @code{after-gc-hook}

@item The default error handler can now be redefined. If the variable
@code{error-handler-function} contains a function then it will be
called to handle the error, with arguments @code{(@var{error}
@var{data})}.

@item New special form @code{case}, switches on a key value and sets of
constants

@item New function @code{call/cc} (also available through the alias
@code{call-with-current-continuation}). Provides scheme-like
continuation functions. Special variables are now deep-bound to support
this correctly

@item Supports ``soft'' preemptive threads using continuations and a
general ``barrier'' mechanism (used either for restricting control
flow, or for receiving notification when control passes across a
barrier)

@item Parameter lists in lambda expressions now support improper lists,
as in scheme. E.g. @code{(lambda (x . y) @dots{})}

@item Implements the scheme @code{define} syntax, with support for
inner definitions

@item The @code{tables} plugin implements hash tables, with extensible
hashing and comparison methods; supports both strongly and weakly keyed
tables

@item Included a GDBM binding; DOC files are now stored in GDBM files
(SDBM has limits on datum sizes)

@item @code{put} and @code{get} functions now use @code{equal} to
compare property names

@item Virtual machine / compiler improvements:

@itemize @minus
@item Variable references and mutations are classified by type: lexical
bindings use (one-dimensional) lexically addressed instructions, global
non-special bindings have their own instructions, everything else uses
the original instructions. Similar classification when creating new
bindings

@item Eliminate tail-recursive function calls wherever possible in
compiled code (when the calling function has no dynamic state)
@end itemize

@noindent
Compiled lisp code will need to be rebuilt to run on the modified
virtual machine.

@item When expanding macros, bind @code{macro-environment} to the
macro environment it was called with. This allows macros to reliably
expand inner macro uses

@item New hook @code{before-exit-hook}. Called immediately before
exiting

@item @code{rep-xgettext} now has an option @samp{--c}. This makes it
output pseudo C code containing the string constants found

@item Fixed misfeature of interpreting filenames
@file{@var{foo}//@var{bar}} as @file{/@var{bar}}. Contiguous path
separators are now merged (i.e. @file{@var{foo}/@var{bar}})

@end itemize


@unnumberedsec 0.10

@itemize @bullet

@item Updated support for dumping (freezing) lisp definitions to handle
lisp-1 nature with closures. Also now generates C code instead of
assembler for portability; creates a plugin that may be loaded through
the REP_DUMP_FILE environment variable

@item Plugin @file{.la} files may now contain rep-specific settings:
@samp{rep_open_globally=yes} and
@samp{rep_requires='@var{FEATURES}@dots{}'}

@item New function @code{define-value}. A combination of @code{set} and
@code{defvar}, but without implying dynamic scope

@item @code{load} scans @var{after-load-alist} for plugins as well as
lisp libraries

@item @code{(if t)} now evaluates to @code{nil} not @code{t}

@item Fix regexp bug in matching simple non-greedy operators (Matt
Krai)

@item Borrowed guile's bouncing parentheses for readline (Ceri Storey)

@item New C functions @code{rep_load_environment} and
@code{rep_top_level_exit}

@item @code{defvar} allows symbols to be redefined in protected
environments if they haven't also been defined by unprotected
environments

@item Detect GCC's with broken @code{__builtin_return_address}
functions (George Lebl)

@item Try to use libc @code{gettext} implementation, but only if it
looks like it's the GNU implementation

@end itemize


@unnumberedsec 0.9

@itemize @bullet

@item Support for using GNU readline (give configure the
@samp{--with-readline} option)

@item New functions: @code{letrec}, @code{caar}, @dots{}, @code{cddr},
@code{caaar}, @dots{}, @code{cdddr}, @code{in-hook-p},
@code{make-variable-special}

@item Changed @code{unless} to have the Common Lisp semantics---return
@code{nil} when the condition evaluates true, not the value of the
condition

@item Fixed/added some compiler optimisations

@item Fixed @code{rep-xgettext} script to remove duplicated strings and
to search exhaustively

@item @code{add-hook} forces the hook variable to be special (in case
it wasn't declared using @code{defvar})

@end itemize


@unnumberedsec 0.8.1

Fixed some documentation bugs; fixed some build problems


@unnumberedsec 0.8

@itemize @bullet

@item Default scoping is now lexical, only variables declared using
@code{defvar} are dynamically scoped.

@item There is now only a single namespace for symbols (excepting
property lists), this means that the @code{fset},
@code{symbol-function} and @code{fboundp} functions have been removed

This allows all elements in procedure-call forms to be evaluated
equally (as in scheme), so things like:

@lisp
((if t + -) 1 2)
@end lisp

@noindent
now work. Related to this, function names (i.e. symbols and lambda
expressions) are no longer dereferenced by any operations taking
functions as arguments. Only built-in subroutines and closures are
considered functions.

This means that where before you'd write something like:

@lisp
(mapcar '+ '(1 2 3))
@end lisp

@noindent
this is now illegal; the @code{+} function must be evaluated:

@lisp
(mapcar + '(1 2 3))
@end lisp

@item @code{lambda} is now a special form evaluating to a closure (as
in scheme); this means that the following are exactly equivalent:

@lisp
(lambda (x) x) @equiv{} (function (lambda (x) x)) @equiv{} #'(lambda (x) x)
@end lisp

An alternative method of enclosing a lambda expression is to use the
@code{make-closure} function.

@item @code{gaol} module providing semi-safe environment for untrusted
code to evaluate in

@item Support for i18n through @code{gettext} module; also support for
@samp{%1$s} type format specifiers

@item New functions @code{string-equal} and @code{string-lessp}

@end itemize


@unnumberedsec 0.7.1

@itemize @bullet

@item Added @samp{--with-rep-prefix} option to autoconf AM_PATH_REP
macro

@item Fixed bug when inserting a new timer before an existing timer

@item Fix the malloc tracking code

@item Fix dlmalloc for FreeBSD

@item Use install when installing, not cp

@item Some fixes for compiling with SUN's C compiler on Solaris

@end itemize


@unnumberedsec 0.7

@itemize @bullet

@item Added file handler for read-only access to the contents of tar
archives, access files like @file{foo.tar.gz#tar/bar}

@item @code{process-id} function now returns pid of lisp interpreter
when called with zero arguments

@item Added (untested) support for loading dynamic objects via
@code{shl_load} (HP-UX)

@item Added (untested) support for systems that prefix symbol names in
dynamic objects with underscores

@item Fix bug when compiling @code{last} function

@item Fix bug of not closing files in the @code{load} function

@end itemize


@unnumberedsec 0.6.2

@itemize @bullet

@item Added @code{autoload-verbose} variable; set it to @code{nil} to
turn off the messages when autoloading

@item Fix problems when @samp{--prefix} option has a trailing slash

@item Updated libtool files to version 1.3.3

@item Initial (incomplete) support for building under Tru64, from Aron
Griffis

@end itemize


@unnumberedsec 0.6.1

No new features; minor portability tweaks and build changes. Fix bug of
trying to load directories as Lisp scripts


@unnumberedsec 0.6

@itemize @bullet

@item Add @code{unsetenv} function

@item @code{system} now uses @code{process-environment}

@item Workaround compiler bug with GCC 2.95 on sparc

@item Fix build problem where libsdbm.la can't be located

@end itemize


@unnumberedsec 0.5

@itemize @bullet

@item New function @code{set-input-handler}, registers an asynchronous
input handler for a local file

@item Don't abort on receipt of unexpected @code{SIGCHLD} signals

@item Upgrade libtool to version 1.2f

@item The @code{rep} binary by default always loads a script named
@file{rep}, not named by it's @code{argv[0]} (this breaks under the
newer libtool)

@end itemize


@unnumberedsec 0.4

@itemize @bullet

@item Sending a rep process a @code{SIGUSR2} prints all debug buffers

@item Added @samp{--with-value-type}, and
@samp{--with-malloc-alignment} configure options. Also added code to
automatically detect the first of these options.

@item Fixed some 64-bit problems

@item Removed the difference between static and dynamic strings

@end itemize


@unnumberedsec 0.3

@itemize @bullet

@item New compiler command line option @samp{--write-docs}

@end itemize


@unnumberedsec 0.2

@itemize @bullet

@item The variables @code{error-mode} and @code{interrupt-mode} control
where errors and user-interrupts (i.e. @code{SIGINT} signals) are
handled. The three possible values are: @code{top-level}, @code{exit}
and @code{nil} (denotes the current event loop).

@item Fixed bug where all dynamic types were erroneously @code{symbolp}.

@item @code{SIGINT}, @code{SIGHUP} and @code{SIGTERM} signals should
now be caught more successfully.

@item Added a new directory to @code{dl-load-path}:
@samp{@var{libexecdir}/rep/@var{arch}} to contain third-party shared
libraries.

@end itemize


@unnumberedsec 0.1

First public release.
